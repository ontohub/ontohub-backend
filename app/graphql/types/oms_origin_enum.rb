# frozen_string_literal: true

Types::OMSOriginEnum = GraphQL::EnumType.define do
  name 'OMSOrigin'
  description 'Specifies the origin of the OMS'

  value 'dg_empty', 'empty OMS'
  value 'dg_basic', 'basic OMS'
  value 'dg_basic_spec', 'basic OMS'
  value 'dg_extension', 'extension OMS'
  value 'dg_logic_coercion', 'logic coercion OMS'
  value 'dg_translation', 'OMS translation'
  value 'dg_union', 'OMS union'
  value 'dg_intersect', 'OMS intersection'
  value 'dg_extract', 'OMS module extraction'
  value 'dg_restriction', 'OMS hiding'
  value 'dg_reveal_translation', 'OMS translation after hiding'
  value 'free', 'free OMS'
  value 'cofree', 'cofree OMS'
  value 'np_free', 'free OMS generated by Maude'
  value 'minimize', 'minimization OMS'
  value 'dg_local', 'local OMS (CASL syntax)'
  value 'dg_closed', 'closed OMS (CASL syntax)'
  value 'dg_logic_qual', 'logic qualification'
  value 'dg_data', 'data part of an OMS'
  value 'dg_formal_params', 'formal parameter OMS'
  value 'dg_imports', 'import OMS (CASL syntax)'
  value 'dg_inst', 'instantiation of a parameterized OMS (CASL syntax)'
  value 'dg_fit_spec', 'fitting argument (CASL syntax)'
  value 'dg_fit_view', 'fitting view (CASL syntax)'
  value 'dg_proof', 'proof in the development graph calculus'
  value 'dg_normal_form', 'computation of normal form or colimit'
  value 'dg_integrated_scc', 'computation of strongly connected component'
  value 'dg_flattening', 'flattening of an OMS'
  value 'dg_alignment', 'alignment'
  value 'dg_test', 'used for testing purposes'
end
