# Base mutation type
type Mutation {
  # Confirms the email address of a user
  confirmEmail(
    # The confirmation token from the confirmation email
    token: String!
  ): SessionToken

  # Creates a new organization
  createOrganization(
    # The parameters of the new organization
    data: NewOrganization!
  ): Organization

  # Creates as new repository
  createRepository(
    # The parameters of the new repository
    data: NewRepository!
  ): Repository

  # Deletes the account of the currently signed in user.
  # Returns `true` if it was successful and `null` if there was an error.
  deleteAccount(
    # Password of the current user to confirm the deletion
    password: String!
  ): Boolean

  # Deletes an organization.
  # Returns `true` if it was successful and `null` if there was an error.
  deleteOrganization(
    # The ID of the organization to delete
    id: ID!
  ): Boolean

  # Deletes a repository
  deleteRepository(
    # The ID of the repository to delete
    id: ID!
  ): Boolean

  # Resends the confirmation email to a user
  resendConfirmationEmail(
    # The email address of the user
    email: String!
  ): Boolean!

  # Resends the password reset email to a user
  resendPasswordResetEmail(
    # The email address of the user
    email: String!
  ): Boolean!

  # Resends the unlock account email to a user
  resendUnlockAccountEmail(
    # The email address of the user
    email: String!
  ): Boolean!

  # Resets a user's password
  resetPassword(
    # The new password
    password: String!

    # The reset token from the password reset email
    token: String!
  ): SessionToken

  # Updates the current user account
  saveAccount(
    # Updated fields of the user
    data: UserChangeset!

    # Password of the current user to confirm the update
    password: String!
  ): User

  # Updates an organization
  saveOrganization(
    # Updated fields of the organization
    data: OrganizationChangeset!

    # ID of the organization to update
    id: ID!
  ): Organization

  # Updates a repository
  saveRepository(
    # Updated fields of the repository
    data: RepositoryChangeset!

    # ID of the repository to update
    id: ID!
  ): Repository

  # Signs in a user
  signIn(
    # The user's password
    password: String!

    # The user's name
    username: String!
  ): SessionToken

  # Signs up a user
  signUp(
    # A reCAPTCHA token
    captcha: String!

    # The new user's data
    user: NewUser!
  ): SessionToken

  # Unlocks a locked user account
  unlockAccount(
    # The unlock account token from the unlock account email
    token: String!
  ): SessionToken
}

# Contains all fields that are possible to set when creating a new
# organization
input NewOrganization {
  # A short description of the organization
  description: String

  # The name of the organization
  displayName: String

  # ID of the new organization
  id: ID!
}

# Data of a new repository
input NewRepository {
  # The content type of the repository
  contentType: RepositoryContentType!

  # The description of the repository
  description: String

  # Name of the repository
  name: ID!

  # The ID of the owner
  owner: String!

  # The visibility of the repository
  visibility: RepositoryVisibility!
}

# Data of a a new user that is about to sign up
input NewUser {
  # The name of the user
  displayName: String

  # The email address of the user
  email: String!

  # The password of the user
  password: String!

  # Name/id of the user
  username: ID!
}

# Data of an organization
type Organization implements OrganizationalUnit {
  # Description of the organization
  description: String

  # Display name of the organizational unit
  displayName: String

  # ID of the organizational unit
  id: ID!

  # List of members
  members(
    # Maximum number of members to list
    limit: Int = 20

    # Skip the first n members
    skip: Int = 0
  ): [User!]!

  # List of repositories owned by this organizational unit
  repositories(
    # Maximum number of repositories to list
    limit: Int = 20

    # Skip the first n repositories
    skip: Int = 0
  ): [Repository!]!
}

# Contains all fields of an organization that can be changed
input OrganizationChangeset {
  # A short description of the organization
  description: String

  # The name of the organization
  displayName: String
}

# Common fields of organizational units
interface OrganizationalUnit {
  # Display name of the organizational unit
  displayName: String

  # ID of the organizational unit
  id: ID!

  # List of repositories owned by this organizational unit
  repositories(
    # Maximum number of repositories to list
    limit: Int = 20

    # Skip the first n repositories
    skip: Int = 0
  ): [Repository!]!
}

# Base query type
type Query {
  # The currently signed in user
  me: User

  # The organizational unit for the given ID
  organizationalUnit(
    # ID of the organizational unit
    id: ID!
  ): OrganizationalUnit

  # The repository for the given ID
  repository(
    # ID of the repository
    id: ID!
  ): Repository

  # The version of the running backend
  version: Version!
}

# Data of a repository
type Repository {
  # Branches of the repository
  branches: [String!]!

  # Type of the repository
  contentType: RepositoryContentType!

  # Default branch of the repository
  defaultBranch: String

  # Description of the repository
  description: String

  # ID of the repository
  id: ID!

  # Name of the repository
  name: String!

  # Owner of the repository
  owner: OrganizationalUnit!

  # Visibility of the repository
  visibility: RepositoryVisibility!
}

# Contains all fields of a repository that can be changed
input RepositoryChangeset {
  # The content type of the repository
  contentType: RepositoryContentType

  # A short description of the repository
  description: String

  # The visibility of the repository
  visibility: RepositoryVisibility
}

# Possible types of repositories
enum RepositoryContentType {
  mathematical
  model
  ontology
  specification
}

# Possible values for repository visibilities
enum RepositoryVisibility {
  private
  public
}

# Data of a signed in user
type SessionToken {
  # The session token
  jwt: String!

  # The current user
  me: User!
}

# Data of a user
type User implements OrganizationalUnit {
  # Display name of the organizational unit
  displayName: String

  # Email address of the user
  email: String

  # MD5 hash of the user's email address
  emailHash: String!

  # ID of the organizational unit
  id: ID!

  # List of organizations the user is a member of
  organizations(
    # Maximum number of organizations to list
    limit: Int = 20

    # Skip the first n organizations
    skip: Int = 0
  ): [Organization!]!

  # List of repositories owned by this organizational unit
  repositories(
    # Maximum number of repositories to list
    limit: Int = 20

    # Skip the first n repositories
    skip: Int = 0
  ): [Repository!]!

  # Email address of the user that still needs to be confirmed
  unconfirmedEmail: String
}

# Contains all fields of a user account that can be changed
input UserChangeset {
  # The name of the user
  displayName: String

  # The email address of the user
  email: String

  # The password of the user
  password: String
}

# Version of the running backend
type Version {
  # Short git hash of the deployed version
  commit: String!

  # Amount of commits since the last version bump
  commitsSinceTag: Int!

  # Full version as generated by `git describe --long --tags`
  full: String!

  # Last published version
  tag: String!
}
