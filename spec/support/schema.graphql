# Base mutation type
type Mutation {
  # Creates a new organization
  createOrganization(
    # The parameters of the new organization
    data: NewOrganization!
  ): Organization

  # Deletes the account of the currently signed in user.
  # Returns `true` if it was successful and `null` if there was an error.
  deleteAccount(
    # Password of the current user to confirm the deletion
    password: String!
  ): Boolean

  # Deletes an organization.
  # Returns `true` if it was successful and `null` if there was an error.
  deleteOrganization(
    # The ID of the organization to delete
    id: ID!
  ): Boolean

  # Updates the current user account
  saveAccount(
    # Updated fields of the user
    data: UserChangeset!

    # Password of the current user to confirm the update
    password: String!
  ): User

  # Updates an organization
  saveOrganization(
    # Updated fields of the organization
    data: OrganizationChangeset!

    # ID of the organization to update
    id: ID!
  ): Organization
}

# Contains all fields that are possible to set when creating a new
# organization
input NewOrganization {
  # A short description of the organization
  description: String

  # The name of the organization
  displayName: String

  # ID of the new organization
  id: ID!
}

# Data of an organization
type Organization implements OrganizationalUnit {
  # Description of the organization
  description: String

  # Display name of the organization
  displayName: String

  # ID of the organization
  id: ID!

  # List of members
  members(
    # Maximum number of members to list
    limit: Int = 20

    # Skip the first n members
    skip: Int = 0
  ): [User]!
}

# Contains all fields of an organization that can be changed
input OrganizationChangeset {
  # A short description of the organization
  description: String

  # The name of the organization
  displayName: String
}

# Common fields of organizational units
interface OrganizationalUnit {
  # Display name of the organizational unit
  displayName: String

  # ID of the organizational unit
  id: ID!
}

# Base query type
type Query {
  # The organizational unit for the given ID
  organizationalUnit(
    # ID of the organizational unit
    id: ID!
  ): OrganizationalUnit

  # The version of the running backend
  version: Version!
}

# Data of a user
type User implements OrganizationalUnit {
  # Display name of the user
  displayName: String

  # Email address of the user
  email: String

  # MD5 hash of the user's email address
  emailHash: String!

  # ID of the user
  id: ID!

  # List of organizations the user is a member of
  organizations(
    # Maximum number of organizations to list
    limit: Int = 20

    # Skip the first n organizations
    skip: Int = 0
  ): [Organization]!

  # Email address of the user that still needs to be confirmed
  unconfirmedEmail: String
}

# Contains all fields of a user account that can be changed
input UserChangeset {
  # The name of the user
  displayName: String

  # The email address of the user
  email: String

  # The password of the user
  password: String
}

# Version of the running backend
type Version {
  # Short git hash of the deployed version
  commit: String!

  # Amount of commits since the last version bump
  commitsSinceTag: Int!

  # Full version as generated by `git describe --long --tags`
  full: String!

  # Last published version
  tag: String!
}
