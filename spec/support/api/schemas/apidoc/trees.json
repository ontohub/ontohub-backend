{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Trees",
  "description": "Enpoints for trees (files and diectories)",

  "type": {"$ref": "../models/blob_model.json#/type"},
  "required": {"$ref": "../models/blob_model.json#/required"},
  "properties": {"$ref": "../models/blob_model.json#/properties"},

  "definitions": {
    "content": {
      "type": "string",
      "description": "The desired file content",
      "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.\nNullam congue, neque ut fermentum pretium"
    },
    "encoding": {
      "type": "string",
      "enum": ["plain", "base64"],
      "description": "The encoding of the content. This is required whenever a content is supplied. This is either \"plain\" for plain text or \"base64\" for Base64-encoded binary data.",
      "example": "plain"
    },
    "commit_message": {
      "type": "string",
      "description": "A short description of the change to the repository made by this request (git commit message).",
      "example": "Add the story of lorem ipsum."
    },
    "requestSchemas": {
      "create": {
        "type": "object",
        "required": ["data"],
        "properties": {
          "data": {
            "description": "Attributes for creating a file.",
            "type": "object",
            "required": ["attributes"],
            "properties": {
              "attributes": {
                "type": "object",
                "required": ["content", "encoding", "path", "commit_message"],
                "properties": {
                  "content": {"$ref": "#/definitions/content"},
                  "encoding": {"$ref": "#/definitions/encoding"},
                  "path": {
                    "type": "string",
                    "description": "The file path relative to the repository root",
                    "example": "/documents/story.txt"
                  },
                  "commit_message": {
                    "type": {"$ref": "#/definitions/commit_message/type"},
                    "description": {"$ref": "#/definitions/commit_message/description"},
                    "example": "Add the story of lorem ipsum."
                  }
                }
              }
            }
          }
        }
      },
      "update": {
        "type": "object",
        "required": ["data"],
        "properties": {
          "data": {
            "description": "Attributes for creating a file. If the file content is supposed to be changed, both `content` and `encoding` must be supplied. If the file is supposed to be renamed, the target path must be supplied with the `path` attribute. Changing the content and renaming at the same time is supported.",
            "type": "object",
            "required": ["attributes"],
            "properties": {
              "attributes": {
                "type": "object",
                "required": ["commit_message"],
                "properties": {
                  "content": {"$ref": "#/definitions/content"},
                  "encoding": {"$ref": "#/definitions/encoding"},
                  "path": {
                    "type": "string",
                    "description": "The new (after renaming) file path relative to the repository root",
                    "example": "/documents/lorem_story.txt"
                  },
                  "commit_message": {
                    "type": {"$ref": "#/definitions/commit_message/type"},
                    "description": {"$ref": "#/definitions/commit_message/description"},
                    "example": "Change the story of lorem ipsum."
                  }
                }
              }
            }
          }
        }
      },
      "multiaction": {
        "type": "object",
        "required": ["data"],
        "properties": {
          "data": {
            "description": "Attributes for creating a file. If the file content is supposed to be changed, both `content` and `encoding` must be supplied. If the file is supposed to be renamed, the target path must be supplied with the `path` attribute. Changing the content and renaming at the same time is supported.",
            "type": "object",
            "required": ["attributes"],
            "properties": {
              "attributes": {
                "type": "object",
                "required": ["files", "commit_message"],
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": ["path", "content", "encoding", "action"],
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The desired file path relative to the repository root",
                              "example": "/documents/story.txt"
                            },
                            "content": {"$ref": "#/definitions/content"},
                            "encoding": {"$ref": "#/definitions/encoding"},
                            "action": {
                              "type": "string",
                              "enum": ["create"],
                              "description": "This is set to create a file with the given attributes",
                              "example": "create"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": ["path", "previous_path", "action"],
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The desired (new) file path relative to the repository root",
                              "example": "/documents/story.txt"
                            },
                            "previous_path": {
                              "type": "string",
                              "description": "The current file path relative to the repository root",
                              "example": "/documents/story.txt"
                            },
                            "action": {
                              "type": "string",
                              "enum": ["rename"],
                              "description": "This is set to rename a file",
                              "example": "rename"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": ["path", "content", "encoding", "action"],
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The current file path relative to the repository root",
                              "example": "/documents/story.txt"
                            },
                            "content": {"$ref": "#/definitions/content"},
                            "encoding": {"$ref": "#/definitions/encoding"},
                            "action": {
                              "type": "string",
                              "enum": ["update"],
                              "description": "This is set to update a file with the given attributes",
                              "example": "update"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": ["path", "content", "encoding", "previous_path", "action"],
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The desired (new) file path relative to the repository root",
                              "example": "/documents/story.txt"
                            },
                            "previous_path": {
                              "type": "string",
                              "description": "The current file path relative to the repository root",
                              "example": "/documents/story.txt"
                            },
                            "content": {"$ref": "#/definitions/content"},
                            "encoding": {"$ref": "#/definitions/encoding"},
                            "action": {
                              "type": "string",
                              "enum": ["update"],
                              "description": "This is set to update a file with the given attributes",
                              "example": "update"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": ["path", "action"],
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The file path relative to the repository root",
                              "example": "/documents/story.txt"
                            },
                            "action": {
                              "type": "string",
                              "enum": ["remove"],
                              "description": "This is set to remove the file",
                              "example": "remove"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": ["path", "action"],
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The desired path of the directory relative to the repository root",
                              "example": "/documents"
                            },
                            "action": {
                              "type": "string",
                              "enum": ["mkdir"],
                              "description": "This is set to create a directory",
                              "example": "mkdir"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "commit_message": {
                    "type": {"$ref": "#/definitions/commit_message/type"},
                    "description": {"$ref": "#/definitions/commit_message/description"},
                    "example": "Change the story of lorem ipsum."
                  }
                }
              }
            }
          }
        }
      }
    }
  },

  "links": [
    {
      "title": "Create on the default branch",
      "description": "Create a new file on the default branch (usually `master`). It fails if the path already exists on that branch. Returns HTTP 201 (Created).",
      "rel": "self",
      "href": "/:repository_id/tree/",
      "method": "POST",
      "schema": {"$ref": "#/definitions/requestSchemas/create"},
      "targetSchema": {"$ref": "../controllers/v2/trees/post_create.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Create on a specific branch",
      "description": "Create a new file on a specific branch. It fails if the `path` already exists on that branch. Returns HTTP 201 (Created).",
      "rel": "self",
      "href": "/:repository_id/ref/:branch/tree/",
      "method": "POST",
      "schema": {"$ref": "#/definitions/requestSchemas/create"},
      "targetSchema": {"$ref": "../controllers/v2/trees/post_create.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Show file on the default branch",
      "description": "Show a file on the default branch (usually `master`). Here, `path` must be an existing file path. Returns HTTP 200 (OK).",
      "rel": "self",
      "href": "/repositories/:repository_id/tree/:path",
      "method": "GET",
      "targetSchema": {"$ref": "../controllers/v2/trees/get_show_blob.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Show file on a specific branch",
      "description": "Show a file on a specific branch. Here, `path` must be an existing file path. Returns HTTP 200 (OK).",
      "rel": "self",
      "href": "/repositories/:repository_id/ref/:branch/tree/:path",
      "method": "GET",
      "targetSchema": {"$ref": "../controllers/v2/trees/get_show_blob.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Show file on a specific tag",
      "description": "Show a file on a specific tag. Here, `path` must be an existing file path. Returns HTTP 200 (OK).",
      "rel": "self",
      "href": "/repositories/:repository_id/ref/:tag/tree/:path",
      "method": "GET",
      "targetSchema": {"$ref": "../controllers/v2/trees/get_show_blob.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Show file on a specific commit",
      "description": "Show a file on a specific commit. Here, `path` must be an existing file path. Returns HTTP 200 (OK).",
      "rel": "self",
      "href": "/repositories/:repository_id/ref/:commit_sha/tree/:path",
      "method": "GET",
      "targetSchema": {"$ref": "../controllers/v2/trees/get_show_blob.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Show directory on the default branch",
      "description": "Show a directory on the default branch (usually `master`). Here, `path` must be an existing directory path. Returns HTTP 200 (OK).",
      "rel": "self",
      "href": "/repositories/:repository_id/tree/:path",
      "method": "GET",
      "targetSchema": {"$ref": "../controllers/v2/trees/get_show_tree.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Show directory on a specific branch",
      "description": "Show a directory on a specific branch. Here, `path` must be an existing directory path. Returns HTTP 200 (OK).",
      "rel": "self",
      "href": "/repositories/:repository_id/ref/:branch/tree/:path",
      "method": "GET",
      "targetSchema": {"$ref": "../controllers/v2/trees/get_show_tree.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Show directory on a specific tag",
      "description": "Show a directory on a specific tag. Here, `path` must be an existing directory path. Returns HTTP 200 (OK).",
      "rel": "self",
      "href": "/repositories/:repository_id/ref/:tag/tree/:path",
      "method": "GET",
      "targetSchema": {"$ref": "../controllers/v2/trees/get_show_tree.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Show directory on a specific commit",
      "description": "Show a directory on a specific commit. Here, `path` must be an existing directory path. Returns HTTP 200 (OK).",
      "rel": "self",
      "href": "/repositories/:repository_id/ref/:commit_sha/tree/:path",
      "method": "GET",
      "targetSchema": {"$ref": "../controllers/v2/trees/get_show_tree.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Update on the default branch",
      "description": "Change and/or rename an existing file on the default branch (usually `master`). It fails if the path does not exist on that branch. Returns HTTP 200 (OK).",
      "rel": "self",
      "href": "/:repository_id/tree/:existing_file_path",
      "method": "PATCH",
      "schema": {"$ref": "#/definitions/requestSchemas/update"},
      "targetSchema": {"$ref": "../controllers/v2/trees/patch_update.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Update on a specific branch",
      "description": "Change and/or rename an existing file on a specific branch. It fails if the path does not exist on that branch. Returns HTTP 200 (OK).",
      "rel": "self",
      "href": "/:repository_id/ref/:branch/tree/:existing_file_path",
      "method": "PATCH",
      "schema": {"$ref": "#/definitions/requestSchemas/update"},
      "targetSchema": {"$ref": "../controllers/v2/trees/patch_update.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Delete on the default branch",
      "description": "Remove a file from the repository on the default branch (usually `master`). Returns HTTP 204 (No Content)",
      "rel": "self",
      "href": "/:repository_id/tree/:existing_file_path",
      "method": "DELETE",
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Delete on a specific branch",
      "description": "Remove a file from the repository on a specific branch. Returns HTTP 204 (No Content)",
      "rel": "self",
      "href": "/:repository_id/ref/:branch/tree/:existing_file_path",
      "method": "DELETE",
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Multiaction on the default branch",
      "description": "Apply multiple changes (create a directory, create a file, rename a file, change a file, remove a file) to the repository at once on the default branch (usually `master`). Returns HTTP 200 (OK)",
      "rel": "self",
      "href": "/:repository_id/ref/:branch/tree",
      "method": "PATCH",
      "schema": {"$ref": "#/definitions/requestSchemas/multiaction"},
      "targetSchema": {"$ref": "../controllers/v2/trees/patch_multiaction.json"},
      "mediaType": "application/vnd.api+json"
    },
    {
      "title": "Multiaction on a specific branch",
      "description": "Apply multiple changes (create a directory, create a file, rename a file, change a file, remove a file) to the repository at once on a specific branch. Returns HTTP 200 (OK)",
      "rel": "self",
      "href": "/:repository_id/ref/:branch/tree",
      "method": "PATCH",
      "schema": {"$ref": "#/definitions/requestSchemas/multiaction"},
      "targetSchema": {"$ref": "../controllers/v2/trees/patch_multiaction.json"},
      "mediaType": "application/vnd.api+json"
    }
  ]
}
